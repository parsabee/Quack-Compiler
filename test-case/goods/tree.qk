/* abstract node class */
class Node() {
    def search(val: Int): Boolean {
        return false;
    }

    def STR(): String {
        return "";
    }
}

/* leaf concrete type */
class Leaf(value: Int) extends Node {
    this.val = value;

    def STR(): String {
        return this.val.STR();
    }

    def search(val: Int): Boolean {
        if (this.val == val) {
            return true;
        } else {
            return false;
        }
    }
}

/* inner node concrete type */
class Inner(left: Node, right: Node, value: Int) extends Node {
    this.val = value;
    this.l = left;
    this.r = right;

    def STR(): String {
        return this.l.STR() + " " + this.val.STR() + " " + this.r.STR();
    }

    def search(val: Int): Boolean {
        if (this.val == val) {
            return true;
        } elif (this.val < val) {
            return this.r.search(val);
        } else {
            return this.l.search(val);
        }
    }
}

root: Node = Inner(Inner(Leaf(3), Leaf(5), 4), Inner(Leaf(7), Leaf(9), 8), 6);
(root.STR() + "\n").PRINT();
root.search(3).PRINT();